// Export utilities for reports and data
export const exportUtils = {
  // Export to CSV
  exportToCSV: (data: any[], filename: string) => {
    if (data.length === 0) return;
    
    const headers = Object.keys(data[0]);
    const csvContent = [
      headers.join(','),
      ...data.map(row => 
        headers.map(header => {
          const value = row[header];
          // Handle values that might contain commas or quotes
          if (typeof value === 'string' && (value.includes(',') || value.includes('"'))) {
            return `"${value.replace(/"/g, '""')}"`;
          }
          return value;
        }).join(',')
      )
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `${filename}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  },

  // Export to Excel (using CSV format for simplicity)
  exportToExcel: (data: any[], filename: string) => {
    exportUtils.exportToCSV(data, filename);
  },

  // Export to PDF (basic implementation)
  exportToPDF: async (content: string, filename: string) => {
    // Create a simple PDF-like HTML content
    const htmlContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <title>${filename}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            h1 { color: #333; border-bottom: 2px solid #333; padding-bottom: 10px; }
            .header { text-align: center; margin-bottom: 30px; }
            .content { line-height: 1.6; }
            .footer { margin-top: 30px; text-align: center; font-size: 12px; color: #666; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>ProjectFlow Report</h1>
            <p>Generated on ${new Date().toLocaleDateString()}</p>
          </div>
          <div class="content">
            ${content}
          </div>
          <div class="footer">
            <p>Generated by ProjectFlow - Project Management System</p>
          </div>
        </body>
      </html>
    `;

    const blob = new Blob([htmlContent], { type: 'text/html' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `${filename}.html`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  },

  // Generate report content
  generateTaskReport: (tasks: any[]) => {
    return tasks.map(task => ({
      'Task Name': task.name,
      'Status': task.status,
      'Priority': task.priority,
      'Assignee': task.assignee?.name || 'Unassigned',
      'Project': task.project,
      'Due Date': task.dueDate,
      'Estimated Hours': task.estimatedHours || 0,
      'Created': new Date(task.createdAt).toLocaleDateString(),
      'Updated': new Date(task.updatedAt).toLocaleDateString()
    }));
  },

  generateProjectReport: (projects: any[]) => {
    return projects.map(project => ({
      'Project Name': project.name,
      'Status': project.status,
      'Priority': project.priority,
      'Manager': project.manager?.name || 'Unassigned',
      'Progress': `${project.progress}%`,
      'Budget': `$${project.budget.toLocaleString()}`,
      'Spent': `$${project.spent.toLocaleString()}`,
      'Start Date': project.startDate,
      'End Date': project.endDate,
      'Team Size': project.team?.length || 0
    }));
  },

  generateUserReport: (users: any[]) => {
    return users.map(user => ({
      'Name': user.name,
      'Email': user.email,
      'Role': user.role,
      'Department': user.department,
      'Status': user.status,
      'Last Login': new Date(user.lastLogin).toLocaleDateString(),
      'Created': new Date(user.createdAt).toLocaleDateString()
    }));
  },

  generateTimeReport: (timeEntries: any[]) => {
    return timeEntries.map(entry => ({
      'Task': entry.taskName || 'Unknown',
      'User': entry.userName || 'Unknown',
      'Duration': `${Math.floor(entry.duration / 60)}h ${entry.duration % 60}m`,
      'Billable': entry.billable ? 'Yes' : 'No',
      'Rate': entry.hourlyRate ? `$${entry.hourlyRate}/hr` : 'N/A',
      'Total': entry.billable && entry.hourlyRate ? `$${((entry.duration / 60) * entry.hourlyRate).toFixed(2)}` : 'N/A',
      'Date': new Date(entry.startTime).toLocaleDateString(),
      'Description': entry.description
    }));
  }
};